class Solution {
public:
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        int vis[m+1][n+1];
        memset(vis,0,sizeof vis);
        for(auto it : guards) {
            vis[it[0]+1][it[1]+1] = 3;
        }
        for(auto it : walls) {
            vis[it[0]+1][it[1]+1] = 2;
        }
        for(int i = 1; i <= m; i++) {
            int p = 0;
            for(int j = 1; j <= n; j++) {
                if(vis[i][j] == 3) p = 1;
                if(vis[i][j] == 2) p = 0;
                vis[i][j] = max(vis[i][j],p);
            }
            p = 0;
            for(int j = n; j > 0; j--) {
                if(vis[i][j] == 3) p = 1;
                if(vis[i][j] == 2) p = 0;
                vis[i][j] = max(vis[i][j],p);
            }
        }
        for(int j = 1; j <= n; j++) {
            int p = 0;
            for(int i = 1; i <= m; i++) {
                if(vis[i][j] == 3) p = 1;
                if(vis[i][j] == 2) p = 0;
                vis[i][j] = max(vis[i][j],p);
            }
            p = 0;
            for(int i = m; i > 0; i--) {
                if(vis[i][j] == 3) p = 1;
                if(vis[i][j] == 2) p = 0;
                vis[i][j] = max(vis[i][j],p);
            }
        }
        int ans = 0;
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                //cout << vis[i][j] << ' ';
                ans += (vis[i][j] == 0);
            }
            //cout << endl;
        }
        return ans;
    }
};
