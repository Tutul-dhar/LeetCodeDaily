/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int mxdis[100100],currentmx = 0;
    void dfs(TreeNode* node,int dis = 0) {
        if(!node) return;
        mxdis[node->val] = currentmx;
        currentmx = max(dis,currentmx);
        dfs(node->left,dis+1);
        dfs(node->right,dis+1);
    }

    void dfs1(TreeNode* node,int dis = 0) {
        if(!node) return;
        mxdis[node->val] = max(mxdis[node->val],currentmx);
        currentmx = max(dis,currentmx);
        dfs1(node->right,dis+1);
        dfs1(node->left,dis+1);
    }

    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {
        dfs(root);
        currentmx = 0;
        dfs1(root);
        vector<int> ans;
        for(int node : queries) {
            ans.push_back(mxdis[node]);
        }
        return ans;
    }
};
