/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool dfs(TreeNode* root1, TreeNode* root2) {
        bool ok = true;
        if(root1->left and root2->left and root1->left->val == root2->left->val) {
            if(root1->right and !root2->right) return false;
            if(!root1->right and root2->right) return false;
            if(root1->right and root2->right and  root1->right->val != root2->right->val) return false;
            if(root1->right) ok &= dfs(root1->right,root2->right);
            ok &= dfs(root1->left,root2->left);
        }
        else if(root1->left and root2->right and root1->left->val == root2->right->val) {
            if(root1->right and !root2->left) return false;
            if(!root1->right and root2->left) return false;
            if(root1->right and root2->left and  root1->right->val != root2->left->val) return false;
            if(root1->right) ok &= dfs(root1->right,root2->left);
            ok &= dfs(root1->left,root2->right);
        }
        else if(root1->right and root2->left and root1->right->val == root2->left->val) {
            if(root1->left and !root2->right) return false;
            if(!root1->left and root2->right) return false;
            if(root1->left and root2->right and  root1->left->val != root2->right->val) return false;
            if(root1->left) ok &= dfs(root1->left,root2->right);
            ok &= dfs(root1->right,root2->left);
        }
        else if(root1->right and root2->right and root1->right->val == root2->right->val) {
            if(root1->left and !root2->left) return false;
            if(!root1->left and root2->left) return false;
            if(root1->left and root2->left and  root1->left->val != root2->left->val) return false;
            if(root1->left) ok &= dfs(root1->left,root2->left);
            ok &= dfs(root1->right,root2->right);
        } else if(root1->left or root1->right or root2->left or root2->right) return false;

        return ok;
    }
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        if(!root1 and !root2) return true;
        if(!root1 or !root2) return false;
        if(root1->val != root2->val) return false;
        return dfs(root1,root2);
    }
};


------------------------------------------------more optimal code---------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void reconstract(TreeNode* root) {
        if(!root) return;
        if(root->left and root->right) {
            TreeNode* right = root->right;
            TreeNode* left = root->left;
            if(root->right->val < root->left->val) {
                root->left = right;
                root->right = left;
            }
        } else if(root->right) {
            TreeNode* right = root->right;
            root->left = right;
            root->right = NULL;
        }
        reconstract(root->left);
        reconstract(root->right);
    }
    bool dfs(TreeNode* root1, TreeNode* root2) {
        if(!root1 and !root2) return true;
        if(!root1 or !root2) return false;
        if(root1->val != root2->val) return false;
        bool ok = true;
        ok &= dfs(root1->left,root2->left);
        ok &= dfs(root1->right,root2->right);
        return ok;
    }
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        reconstract(root1);
        reconstract(root2);
        return dfs(root1,root2);
    }
};
