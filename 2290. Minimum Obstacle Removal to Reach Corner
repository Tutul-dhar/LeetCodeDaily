class Solution {
public:
    int minimumObstacles(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m));
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) dp[i][j] = n*m + 1;
        }
        
        priority_queue<array<int, 3>, vector<array<int, 3>>, greater<>> pq;
        pq.push({0,0,0});
        while(!pq.empty()) {
            auto [val,x,y] = pq.top();
            pq.pop();
            if(dp[x][y] <= val) continue;
            dp[x][y] = val;
            if(x-1 >= 0) pq.push({val + grid[x-1][y],x-1,y});
            if(y-1 >= 0) pq.push({val + grid[x][y-1],x,y-1});
            if(x + 1 < n) pq.push({val + grid[x+1][y],x+1,y});
            if(y + 1 < m) pq.push({val + grid[x][y+1],x,y+1});
        }
        return dp[n-1][m-1];
    }
};
