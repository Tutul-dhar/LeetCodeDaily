class AllOne {
public:
    struct Node {
        int count; // frequency
        list<string> keys; // list of keys with the same frequency
        Node* prev;
        Node* next;
        Node(int c) {
            count = c;
            prev = nullptr;
            next = nullptr;
        }
    };
    
    unordered_map<string, Node*> mp; // map to track key to node
    Node* head;  // dummy head node
    Node* last;  // last node (max frequency)
    
    // Add a node after prevNode with the given count
    void addNode(Node* prevNode, int count) {
        Node* newNode = new Node(count);
        newNode->next = prevNode->next;
        newNode->prev = prevNode;
        if (newNode->next != nullptr) {
            newNode->next->prev = newNode;
        }
        prevNode->next = newNode;
        if (prevNode == last) last = newNode;
    }
    
    // Remove the node if it's empty
    void removeNode(Node* node) {
        if (node->prev != nullptr) {
            node->prev->next = node->next;
        }
        if (node->next != nullptr) {
            node->next->prev = node->prev;
        }
        if (last == node) last = node->prev;
        delete node;
    }
    
    AllOne() {
        head = new Node(0); // Create dummy head with count 0
        last = head; // Initialize last to head
    }
    
    void inc(string key) {
        // Case: New key
        if (mp.find(key) == mp.end()) {
            // Check if there's already a node with count 1
            if (head->next == nullptr || head->next->count != 1) {
                addNode(head, 1);
            }
            head->next->keys.push_front(key);
            mp[key] = head->next;
        } 
        // Case: Key already exists
        else {
            Node* currNode = mp[key];
            int currCount = currNode->count;
            if (currNode->next == nullptr || currNode->next->count != currCount + 1) {
                addNode(currNode, currCount + 1);
            }
            currNode->next->keys.push_front(key);
            mp[key] = currNode->next;
            currNode->keys.remove(key);
            if (currNode->keys.empty()) {
                removeNode(currNode);
            }
        }
    }
    
    void dec(string key) {
        Node* currNode = mp[key];
        int currCount = currNode->count;
        // Case: The key needs to be removed
        if (currCount == 1) {
            mp.erase(key);
        } 
        // Case: Decrement the count
        else {
            if (currNode->prev == nullptr || currNode->prev->count != currCount - 1) {
                addNode(currNode->prev, currCount - 1);
            }
            currNode->prev->keys.push_front(key);
            mp[key] = currNode->prev;
        }
        currNode->keys.remove(key);
        if (currNode->keys.empty()) {
            removeNode(currNode);
        }
    }
    
    string getMaxKey() {
        if (last == head) return "";
        return last->keys.front();
    }
    
    string getMinKey() {
        if (head->next == nullptr) return "";
        return head->next->keys.front();
    }
};
