/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 #include<vector>
class Solution {
public:
    vector<vector<int>> adj;
    vector<int> ind;
    void solve(TreeNode* node,int pos = 0) {
        if(!node) return;
        if(pos%2) adj[pos].push_back(node->val);
        solve(node->left,pos+1);
        solve(node->right,pos+1);
    }
    void constract_tree(TreeNode* node,int pos = 0) {
        if(!node) return;
        if(pos%2) {
            node->val = adj[pos][ind[pos]];
            ind[pos]++;
        }
        constract_tree(node->left,pos+1);
        constract_tree(node->right,pos+1);
    }
    TreeNode* reverseOddLevels(TreeNode* root) {
        adj.resize(50);
        ind.resize(50);
        solve(root);
        for(int i = 1; ; i += 2) {
            if(adj[i].size()) {
                reverse(adj[i].begin(),adj[i].end());
            } else break;
        }
        constract_tree(root);
        return root;
    }
};
