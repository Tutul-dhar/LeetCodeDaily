class Solution {
public:
    int findMaxFish(vector<vector<int>>& grid) {
        int n = grid.size(),m = grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(grid[i][j] == 0 or vis[i][j]) continue;
                int res = 0;
                queue<pair<int,int>> q;
                q.push({i,j});
                vis[i][j] = 1;
                while(q.size()) {
                    auto it = q.front();
                    int x = it.first,y = it.second;
                    q.pop();
                    
                    res += grid[x][y];
                    if(x-1 >= 0 and grid[x-1][y] and vis[x-1][y] == 0) {
                        q.push({x-1,y});
                        vis[x-1][y] = 1;
                    }
                    if(x+1 < n and grid[x+1][y] and vis[x+1][y] == 0) {
                        q.push({x+1,y});
                        vis[x+1][y] = 1;
                    }
                    if(y-1 >= 0 and grid[x][y-1] and vis[x][y-1] == 0) {
                        q.push({x,y-1});
                        vis[x][y-1] =1;
                    }
                    if(y+1 < m and grid[x][y+1] and vis[x][y+1] == 0) {
                        q.push({x,y+1});
                        vis[x][y+1] = 1;
                    }
                }
                ans = max(ans,res);
            }
        }
        return ans;
    }
};
