class Solution {
public:
    int seg[100100];
    void build(int ind,int ss,int se,int pos,int val) {
        if(ss == se) {
            seg[ind] = val;
            return;
        }
        int mid = (ss+se)>>1;
        if(pos <= mid) build(2*ind,ss,mid,pos,val);
        else build(2*ind+1,mid+1,se,pos,val);
        seg[ind] = max(seg[2*ind],seg[2*ind+1]); 
    }
    int query(int ind,int ss,int se,int l,int r) {
        if(ss > r or se < l) return 0;
        if(ss >= l and se <= r) return seg[ind];
        int mid = (ss+se)>>1;
        return max(query(2*ind,ss,mid,l,r),query(2*ind+1,mid+1,se,l,r));
    }
    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {
        int n = heights.size();
        for(int i = 1; i <= n; i++) {
            build(1,1,n,i,heights[i-1]);
        }
        vector<int> ans;
        for(auto it : queries) {
            if(it[0] > it[1]) swap(it[0],it[1]);
            int l = it[1]+1,r = n,pos = 0;
            if(it[0] == it[1]) {
                ans.push_back(it[0]);
                continue;
            }
            if(heights[it[0]] < heights[it[1]]) {
                ans.push_back(it[1]);
                continue;
            }
            int e = max(heights[it[0]],heights[it[1]]),c = l;
            while(l <= r) {
                int mid = (l+r)>>1;
                int p = query(1,1,n,l,mid);
                if(p > e) {
                    pos = mid;
                    r = mid-1;
                } else l = mid+1;
            }
            pos--;
            ans.push_back(pos);
        }
        return ans;
    }
};
