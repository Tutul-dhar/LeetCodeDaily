class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<int> parent(n*n + 10),cnt(n*n+10,0);

        
        for (int i = 1; i <= n*n; i++) {
            parent[i] = i;
        }

        
        function<int(int)> find = [&](int u) {
            return parent[u] == u ? u : parent[u] = find(parent[u]);
        };

        
        auto unite = [&](int u, int v) {
            int rootU = find(u);
            int rootV = find(v);
            if (rootU != rootV) {
                parent[rootV] = rootU;
                //return true;
            }
            //return false;
        };
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 0) continue;
                int ind = i*n + j + 1;
                if(i-1 >= 0 and grid[i-1][j] == 1) {
                    int p = (i-1)*n + j+1;
                    unite(ind,p);
                }
                if(j-1 >= 0 and grid[i][j-1] == 1) {
                    int p = i*n + j;
                    unite(ind,p);
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                
                if(grid[i][j] == 0) continue;
                int ind = i*n + j + 1;
                int par = find(ind);
                //cout << i << ' ' << j << ' ' << par << endl;
                cnt[par]++;
                ans = max(ans,cnt[par]);
            }
        }

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) continue;
                set<int> s;
                int p;
                if(i-1 >= 0) {
                    p = (i-1)*n + j + 1;
                    p = find(p);
                    s.insert(p);
                }
                if(i+1 < n) {
                    p = (i+1)*n + j + 1;
                    p = find(p);
                    s.insert(p);
                }
                if(j-1 >= 0) {
                    p = i*n + j;
                    p = find(p);
                    s.insert(p);
                }
                if(j+1 < n) {
                    p = i*n + j + 2;
                    p = find(p);
                    s.insert(p);
                }
                int res = 1;
                for(auto it : s) res += cnt[it];
                ans = max(ans,res);
            }
        }
        return ans;
    }
};
