class Solution {
public:
    int minimumTime(vector<vector<int>>& grid) {
        priority_queue<array<int,3>,vector<array<int,3>>,greater<>> pq;
        if(grid[0][1] > 1 and grid[1][0] > 1) return -1;
        pq.push({0,0,0});
        int n = grid.size(),m = grid[0].size();
        int dp[n][m];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) dp[i][j] = 1e9;
        }
        int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right
        int dy[] = {+1, -1, +0, +0};
        while(!pq.empty()) {
            auto [val,x,y] = pq.top();
            pq.pop();
            if(val >= dp[x][y]) continue;
            dp[x][y] = val;
            if(x == n-1 and y == m-1) {
                break;
            }

            for(int i = 0; i < 4; i++) {
                int xx = x + dx[i];
                int yy = y + dy[i];
                if(xx >= 0 and xx < n and yy >= 0 and yy < m) {
                    if(grid[xx][yy] <= val + 1) {
                        pq.push({val + 1,xx,yy});
                    } else {
                        int e = grid[xx][yy] - val;
                        if(e%2) pq.push({grid[xx][yy],xx,yy});
                        else pq.push({grid[xx][yy]+1,xx,yy});
                    }
                }
            }
        }
        return dp[n-1][m-1];
    }
};
