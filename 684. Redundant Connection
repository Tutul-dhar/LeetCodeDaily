class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> parent(n + 1);

        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }

        function<int(int)> find = [&](int u) {
            return parent[u] == u ? u : parent[u] = find(parent[u]);
        };

        auto unite = [&](int u, int v) {
            int rootU = find(u);
            int rootV = find(v);
            if (rootU != rootV) {
                parent[rootV] = rootU;
                return true;
            }
            return false;
        };

        
        for (auto& edge : edges) {
            if (!unite(edge[0], edge[1])) {
                return edge;  
            }
        }

        return {};
    }
};
