class Solution {
public:
    long long seg[400100],a[100100];
    void build(int ind,int ss,int se) {
        if(ss == se) {
            seg[ind] = a[ss];
            return;
        }
        int mid = (ss + se)>>1;
        build(2*ind,ss,mid);
        build(2*ind+1,mid+1,se);
        seg[ind] = max(seg[2*ind],seg[2*ind+1]);
    }

    long long query(int ind,int ss,int se,int l,int r) {
        if(ss > r or se < l) return -1e15;
        if(ss >= l and se <= r) return seg[ind];
        int mid = (ss + se)>>1;
        return max(query(2*ind,ss,mid,l,r),query(2*ind+1,mid+1,se,l,r));
    }

    int shortestSubarray(vector<int>& nums, int k) {
        int ans = 1e6,n = nums.size();
        a[1] = nums[0];a[0] = 0;
        for(int i = 1; i < n; i++) {
            a[i+1] = a[i] + nums[i];
        }
        build(1,1,n);
        for(int i = 1; i <= n; i++) {
            if(nums[i-1] <= 0) continue;
            int left = i,right = n;
            while(left <= right) {
                int mid = (left + right)>>1;
                long long p = query(1,1,n,i,mid);
                if(p-a[i-1] >= (long long)k) {
                    ans = min(ans, mid - i + 1);
                    right = mid-1;
                } else left = mid+1;
            }
        }
        if(ans == 1e6) ans = -1;
        return ans;
    }
};
