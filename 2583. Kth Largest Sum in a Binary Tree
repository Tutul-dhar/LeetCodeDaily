/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long long level_val[100100];
    int mx_level = 0;
    void dfs(TreeNode* root,int level) {
        level_val[level] += root->val;
        mx_level = max(mx_level,level);
        if(root->left != NULL) dfs(root->left,level+1);
        if(root->right != NULL) dfs(root->right,level+1);
    }
    long long kthLargestLevelSum(TreeNode* root, int k) {
        dfs(root,0);
        priority_queue<long long,vector<long long>,greater<long long>> pq;
        for(int i = 0; i <= mx_level; i++) {
            if(pq.size() < k) pq.push(level_val[i]);
            else if(pq.top() < level_val[i]) {
                pq.pop();
                pq.push(level_val[i]);
            }
        }
        if(pq.size() < k) return -1;
        return pq.top();
    }
};
